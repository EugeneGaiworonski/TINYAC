ВНИМАНИЕ! 

Рекомендуется прочитать этот документ перед началом работы.


Программа tiniac.exe является эмулятором машины TINIAC (виртуальной регистровой 3-адресной машины).
TINIAC - виртуальная машина, моделирующая обшие черты ЭВМ первого поколения.

ОСНОВНЫЕ ХАРАКТЕРИСТИКИ
VM TINIAC
----------------------------
Назначение VM TINIAC				арифметические расчеты с целыми числами
Интерфейс с пользователем			ввод с консоли, магнитной ленты, вывод на консоль, магнитную ленту, принтер
Размер оперативной памяти			16 слов
Размер машинного слова			16 бит
Представление чисел в памяти		в форме с фиксированной точкой
Система счисления				двоично-шестнадцатеричная
Языки программирования			язык машинных команд (ЯМК), Автокод
Структура команд				трехадресная

TINIAC поддерживает набор команд учебной ЭВМ "Кроха", за исключением команды 07h (111b) ВЫВОД И СТОП, которая заменена парой команд 07h (0111b) STOP и 08h (1000b) PRNT. Добавлены дополнительные команды.


МИНИМАЛЬНЫЕ ТРЕБОВАНИЯ
----------------------------
Intel 286 compatible
100 Kb HD space
16 Mb RAM
MS-DOS 3.0


УСТРОЙСТВО VM TINIAC
----------------------------

Память
Память (оперативная память) служит для хранения данных и программы во время работы компьютера. Оперативная память состоит из элементов -
ячеек. Каждая ячейка имеет свой номер, который называется адресом. В машине TINIAC 16 ячеек памяти, каждая из которых может хранить 16-разрядное значение - машинное слово. Ячейки памяти последовательно адресуются с 00 до 0F. В соответствии с принципом Фон Неймана, если машинное слово попадает в АЛУ, то оно трактуется как число. Внутреннее представление чисел в TINIAC полностью совпадает с представлением чисел в IBM PC. Команды TINIAC поддерживают знаковую целочисленную арифметику. Набор значений находится в диапазоне -32768..+32767 (08000..07FFF). Имеются две основные операции работы с памятью: 
1. Запись данного в ячейку. ЦП сообщает ОП, что именно надо записать и по какому адресу. При записи в ячейку ее старое содержимое теряется, становится недоступным.
2. Чтение содержимого ячейки. ЦП передает ОП нужный адрес. Содержимое ячейки с этим адресом считывается и пересылается в ЦП. При чтении содержимое ячейки не изменяется.
При включении машины все ячейки памяти содержат 0.

Процессор
Процессор включает в себя следующие устройства:
АЛУ (арифметическо-логическое устройство) - оно выполняет арифметические и логические операции (например, сложение, вычитание, умно-
жение, сравнение);
УУ (устройство управления) - управляет работой процессора.
Регистры - специальные ячейки, которые находятся внутри процессора.
В АЛУ имеются следующие регистры:
1. регистр 1 операнда OP1 разрядностью  16 бит,
2. регистр 2 операнда OP2 разрядностью 16 бит,
3. регистр результата (сумматор) SM разрядностью 16 бит.
При выполнении арифметических команд на эти регистры из памяти считываются операнды, в сумматор помещается результат операции, который затем сохраняется в памяти.
Регистры УУ:
1. указатель на инструкцию IP разрядностью 8 бит, во время выполнения текущей команды содержит адрес команды, следующей за выполняемой,
2. регистр команды CR разрядностью 16 бит (машинное слово), содержит выполняемую команду,
3. регистры точек разрыва BR1 и BR2 разрядностью 8 бит. В эти регистры записываются с консоли адреса команд. Когда адрес команды в регистре IP равен адресу в регистре BR1 или BR2, процессор переходит в шаговый режим работы и выполнение программы приостанавливается.
4. регистр признака Омега разрядностью 1 бит, устанавливается после каждой арифметической операции в 1, если результат строго меньше нуля и в 0 в противном случае,
5. регистр переполнения разрядностью 1 бит, устанавливается в 1, если при выполнении арифметической операции произошло переполнение, сбросить регистр в 0 можно только перезапуском машины.  
При включении машины все регистры содержат 0.

Команды
Машинное слово в устройстве управления трактуется как команда и логически подразделяется на 4 части:
0000-0000-0000-0000
   ^    ^    ^    ^
   |    |    |    |
   |    |    |    --- A3
   |    |    -------- A2
   |    ------------- A1
   ------------------ КОП

КОП - код операции, 4 бита
А1  - первый исполнительный адрес либо непосредственное значение, 4 бита
А2  - второй исполнительный адрес либо непосредственное значение, 4 бита
А3  - третий исполнительный адрес либо непосредственное значение, 4 бита

Для арифметических команд схема выполнения следующая:
[А1] := [А2] Х [А3]  (здесь вместо 'Х' - любая арифметическая операция)

Ниже приведен список команд:
Код Мнемоника   Название        Операция                    Операнды                Пример
00  MOVE        Пересылка       [A3] := [A1]                MOVE [A1]  00  [A3]     00 05 00 02
01  IADD        Сложение        [A3] := [A1] + [A2]         IADD [A1] [A2] [A3]     01 05 02 0A
02  IDIV        Деление         [A3] := [A1] / [A2]         IDIV [A1] [A2] [A3]     02 05 02 0A
03  ISUB        Вычитание       [A3] := [A1] - [A3]         ISUB [A1] [A2] [A3]     03 05 02 0A
04  TREQ        Переход если =  if [A1] = [A2] IP := A3     TREQ [A1] [A2]  A3      04 05 04 0C
05  IMPY        Умножение       [A3] := [A1] * [A2]         IMPY [A1] [A2] [A3]     05 05 02 0A
06  TRGT        Переход если >  if [A1] > [A2] IP := A3     TREQ [A1] [A2]  A3      06 05 04 0C
07  STOP        Стоп            состояние стоп              STOP  00   00   00      07 00 00 00
08  PRNT        Печать          печатать [A3]               PRNT  00   00  [A3]     08 00 00 0C       
09  READ        Чтение ленты    читать с ленты A1 слов      READ  A1   00   A3      09 0F 00 0C
                                в адрес [A3]     
0A  WRTE        Запись на ленту писать на ленту A1 слов     WRTE  A1   00   A3      0A 0F 00 0C 
                                с адреса [A3]
0B  RWND        Подвод ленты    перемотать ленту на зону A3 RWND  00   00   A3      0B 00 00 01
0C  TROV        Переход при     if OV IP := A3              TROV  00   00   A3      0C 00 00 0E 
                переполнении
0D  TRLT        Переход если <  if [A1] < [A2] IP := A3     TRLT [A1] [A2]  A3      0D 05 04 0C
0E  NOOP        Нет операции                                NOOP                    0E 00 00 00
0F  NOOP        Нет операции                                NOOP                    0F 00 00 00
[A] - операнд трактуется как адрес
А - операнд трактуется, как непосредственное значение
00 - операнд игнорируется

*************





1) Обычный(нажать F9).
    В этом режиме эмулятор просто начнет выполнять программу, запрашивая, при необходимости, данные в окне ввода (5) и выводя результат в окно (6). Если программа зациклилась, можно ее завершить нажатием клавиши Esc.
    В случае если во время выполнения программы зафиксирована ошибка, происходит останов и компьютер выдает сообщение об ошибке в окно (4). Там же будет указана и строчка (т.е. адрес команды), при выполнении которой произошла ошибка.
2) Пошаговый(нажать ctrl+F9).
    Аналогичен первому режиму, с очевидными изменениями. Перед выполнением каждой команды, в окне (1) будет выделяться строчка, в которой команда расположена. В окне (7) выводится краткое описание того, что команда будет делать. Команда не будет выполнена, пока Вы не нажмете какую-нибудь клавишу.


МНЕМОНИЧЕСКИЙ РЕЖИМ 
---------------------------- 
    Мало кто знает на память все машкоды УМ-3. Поэтому подавляющему большинству будет удобнее работать в мнемоническом режиме (МР). Для входа/выхода из него надо нажать F6.
В МР все без исключения команды будут отображаться с тремя буквами вместо двух цифр в поле Кода ОПерации. При этом их можно и редактировать, но тут есть одна особенность. КОП начинайте вводить или изменять С САМОЙ ПЕРВОЙ БУКВЫ. При этом 2-я и 3-я буквы поменяются на те, которые присутствуют в коде операции команды с Вашей первой буквой и наименьшим кодом операции. Потом можете изменить вторую букву, потом третью. Однако так не всегда бывает удобно делать. Например, программа поймет Вас в случае, если Вы захотите в КОПе ВВЦ или СЛЦ заменить третью букву на 'В'.
    И еще, НЕ ПЕРЕКЛЮЧАЙТЕСЬ В РУССКУЮ РАСКЛАДКУ! Программа "понимает", что латинской букве d на клавиатуре соответствует русская В. Также не нажимайте клавишу Shift при вводе.


ОТКРЫТИЕ/СОХРАНЕНИЕ
----------------------------
    Теперь о загрузке/сохранении программы на диск. Используйте следующие сочетания клавиш:
F2       - Сохранить
Alt+F2   - Сохранить как...
Ctrl+F2  - Сохранить текст программы в файл...
F3       - Открыть файл...

    Процесс открытия файла:
1)   Нажмите F3. Курсор появится в окне (3).
2.1) Если Вы передумали открывать файл, нажмите Esc.
2.2) Введите полный путь к файлу(можно без расширения) и нажмите Enter.
3)   Если программа смогла открыть файл, то в окне (3) появится либо полный путь к файлу, либо только имя файла, если полный путь в окне (3) не помещается. Теперь при нажатии F2 программа будет сохранена в тот файл, имя которого отображено в окне (3).

    Сохранение текста программы в файл. По нажатии ctrl+F2 в окне (7) появятся последовательно запросы на ввод:
1) Номер строки, с которой начинать сохранение
2) Номер последней сохраняемой строки программы
3) Полный путь к файлу, в который нужно сохранить текст программы

    После выполнения всех указанных действий содержимое конечного файла окажется примерно следующим (сохранялся файл с 5 по 11 строчки не в мнемоническом режиме):
АДР  КОП А1  А2  А3
005   19 006 012 012
006   11 002 002 016
007   11 004 004 016
008   12 000 017 002
009   19 010 010 002
010   16 100 005 000
011   09 000 013 000

    Если в момент сохранения был включен МР, то и текст программы будет соответствующим, т.е. коды команд заменятся их мнемоническими обозначениями.
 

ИЗМЕНЕНИЕ ОПЦИЙ
----------------------------
    Нажмите F7 и посмотрите на окно (7). Переключение между опциями осуществляется клавишами <- и ->, а изменение - клавишами /\ и \/. Для подтверждения изменения нажмите Enter, для отмены - Escape. Что какая опция означает, можно посмотреть, нажав F1. Кстати, контекстная справка может быть вызвана не только при изменении опций, а, например, и при аварийном завершении программы на УМ-3 для разъяснения возникшей ошибки. Можно вызвать справку практически в любой момент.
    В программе имеется возможность сохранить опции по умолчанию, чтобы не изменять их при каждой новой загрузке. Для этого в режиме изменения опций нажмите клавишу F2. Вам будет предложено подтвердить сохранение. В случае подтверждения, в файл options.dat будут записаны новые установки по умолчанию.

ДОПОЛНИТЕЛЬНЫЕ ВОЗМОЖНОСТИ
----------------------------
    Еще о редактировании программы. В окне редактора (1) действуют клавиши: 
Ins      - Вставить пустую строку перед той, на которой находится курсор
Del      - Удалить строку, на которой находится курсор
Ctrl+Ins - То же, что и Ins, но с исправлением адресов - "Умная вставка"
Ctrl+Del - То же, что и Del, но с исправлением адресов - "Умное удаление"

    Вкратце о том, что подразумевается под "умной вставкой и удалением". Когда Вы выполняете, например, обычную вставку строки клавишей Del в середину Вашей программы, обнаруживается неприятная правда: половину программы приходится переписывать заново, т.е. как минимум менять значения адресов в командах. Если же использовать "умный" вариант вставки, то эмулятор постарается автоматически заменить адреса (только необходимые) так, чтобы программа могла выполняться так же, как и до вставки.
    Надо заметить, что все, что находится после первой команды ОСТ, будет рассматриваться эмулятором как числа, т.е. адреса в соответствующих ячейках не будут изменены. Поскольку студенты, как правило, располагают выполняемые команды до команды ОСТ, в большинстве случаев операции "умной" вставки и удаления могут существенно сократить рутинный труд по исправлению адресов. Если Вы хотите, чтобы все адреса во всех командах изменялись при нажатии комбинаций Ctrl+Ins и Ctrl+Del, отключите опцию "Использовать умную вставку/удаление".

    Еще в эмуляторе предусмотрен удобный ввод чисел в память УМ-3. В окне редактора нажмите: Alt+i - для просмотра содержимого ячейки в позиции курсора как целого числа. Для выхода из режима просмотра нажмите любую клавишу кроме Enter'а. Если нажать Enter, то будет предложено изменить содержимое ячейки(т.е. ввести новое значение). Alt+f - то же, что и Alt+i, но для вещественных чисел. При этом можно, к примеру, вводить так:
-1.2345
1.2E-5   (одна целая и две десятых на десять в минус пятой)
+NAN     (+НЕ_ЧИСЛО)
-NAN     (-НЕ_ЧИСЛО)
+INF     (+БЕСКОНЕЧНОСТЬ)
-INF     (-БЕСКОНЕЧНОСТЬ)


ТЕСТОВЫЙ ФАЙЛ
----------------------------
    Для ознакомления с эмулятором прилагается файл "test.em3". Программа, содержащаяся в нем, является решением следующей задачи: Ввести массивы A[1..5] и B[1..5] и распечатать:
-  Массив B, если существует номер i такой, что A[i]=0 или B[i]<>0
-  Массив A, в противном случае
    При этом программа должна быть самовосстанавливающейся (т.е. ее можно запускать несколько раз без автоматического восстановления памяти).

ВМЕСТО ЛИЦЕНЗИИ
----------------------------
    Программа является Freeware. Вы можете распространять ее в сети, сохраняя при этом целостность дистрибутива.

Язык УМ-3, или
Краткая справка для тех, кто не ходил на лекции

Краткая спецификация Учебной Машины.



Комментарии к исходным кодам и файлам .dat

Все файлы с расширением .dat представляют собой обычные текстовые документы в кодировке DOS-OEM. Открывать их, соответственно, лучше в DOS-овском текстовом редакторе.

Устройство файлов:
1) help.dat
<Начало файла>
$<код контекстного элемента>
Текст справки, который нужно
вывести для данного элемента
$<код следующего контекстного элемента>
текст
....
<Конец файла>

Код контекстного элемента - это число, которое однозначно определяет операцию/команду/функцию программы, справку по которой нужно вывести. Длина строки текста в этом файле не должна превышать 48 символов, т.е. ширины окна контекстной справки без единицы.

2) mnem.dat
<Начало файла>
<мнемонич. обозначение команды с кодом 00>
<мнемонич. обозначение команды с кодом 01>
....
<мнемонич. обозначение команды с кодом 31>
<Конец файла>

Мнемоническое обозначение - это трехбуквенный код команды. Желательно, редактируя этот файл, оставлять нетронутыми обозначения несуществующих команд: "???".

3) comdesc.dat
<Начало файла>
<описание команды с кодом 00>
<описание команды с кодом 01>
....
<описание команды с кодом 31>
<Конец файла>

Должно быть только по одному описанию команды на одной строчке. Чтобы напечатать описание в несколько строк, используйте сочетание символов "\n" (без кавычек). Для обозначения адресов используйте только сочетания "A1", "A2", и "A3" (без кавычек). Буква A здесь английская.

4) options.dat
<Начало файла>
<Название опции>
+/-
<Название следующей опции>
+/-
....
<Конец файла>

Если на следующей строчке после названия опции следует знак "+", то опция включена, если "-", то выключена. В файле обязательно должны быть перечислены все опции, в том порядке, в каком они входят в массив options[]. После названия опции обязательно должен быть либо "+",
либо "-". Названия опций в программе не изменятся при изменении соответствующих названий в файле.
